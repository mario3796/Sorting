/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package AlgorithmProject;

/**
 *
 * @author Dell
 */
public class TypeOfAlgorithm extends javax.swing.JFrame {

    /**
     * Creates new form TypeOfAlgorithm
     */
    
    private int array[];
    
    
    private int[]insertionSort(int[]a){
        int key,j;
        for (int i = 1; i < a.length; i++) {
            key=a[i];
            j=i-1;
            while(j>-1 && a[j]>key){
                a[j+1]=a[j];
                j--;
            }
            a[j+1]=key;
        }
        return a;
    }
    
    private int[] bubbleSort(int[]a){
        int temp=0;
        for (int i = 0; i < a.length; i++) {
            for (int j = a.length-1; j > i; j--) {
                if(a[j]<a[j-1]){
                    temp=a[j-1];
                    a[j-1]=a[j];
                    a[j]=temp;
                }
            }
        }
        return a;
    }
    
    private int[] selectionSort(int[]a){
        int n=a.length-1;
        int temp,smallest;
        for (int i = 0; i < n-1; i++) {
            smallest=i;
            for (int j = i+1; j <= n; j++) {
                if(a[j]<a[smallest]){
                    smallest=j;
                }
            }
            temp=a[i];
            a[i]=a[smallest];
            a[smallest]=temp;
        }
        return a;
    }
    
    void merge(int[]a,int l,int m,int r){
        int n1=m-l+1;
        int n2=r-m;
        
        int[]left=new int[n1];
        int[]right=new int[n2];
        
        for (int i = 0; i < n1; i++) {
            left[i]=a[l+i];
        }
        for (int j = 0; j < n2; j++) {
            right[j]=a[m+1+j];
        }
        
        int i=0,j=0;
        
        int k=l;
        while (i<n1 && j<n2) {            
            if(left[i]<=right[j]){
                a[k]=left[i];
                i++;
            }
            else{
                a[k]=right[j];
                j++;
            }
            k++;
        }
        
        while(i<n1){
            a[k]=left[i];
            i++;
            k++;
        }
        
        while(j<n2){
            a[k]=right[j];
            j++;
            k++;
        }
    }
    
    private void mergeSort(int[]a,int l,int r){
        if(l<r){
            int m=(l+r)/2;
            mergeSort(a, l, m);
            mergeSort(a, m+1, r);
            merge(a, l, m, r);
        }
    }
    
    private int partition(int[]a,int low,int high){
        int pivot=a[low];
        int i=low-1;
        int j=high+1;
        while(true){
            do{
                j--;
            }while(!(a[j]<=pivot));
            
            do{
                i++;
            }while(!(a[i]>=pivot));
            if(i<j){
                int temp=a[i];
                a[i]=a[j];
                a[j]=temp;
            }
            else{
                return j;
            }
        }
    }
    
    private void quickSort(int[]a,int low,int high){
        if(low<high){
            int pi=partition(a, low, high);
            quickSort(a, low, pi);
            quickSort(a, pi+1, high);
        }
    }
    
    private static int[]heapify(int[]a,int n,int i){
        int largest;
        int left=(i*2)+1;
        int right=left+1;
        
        if(left<n && a[left]>a[i]){
            largest=left;
        }
        else{
            largest=i;
        }
        if(right<n && a[right]>a[largest]){
            largest=right;
        }
        if(largest!=i){
            int temp=a[i];
            a[i]=a[largest];
            a[largest]=temp;
            heapify(a, n, largest);
        }
        
        return a;
    }
    
    private static int[]build_max(int[]a){
        int n=(a.length)/2;
        for (int i = n; i >= 0; i--) {
            a=heapify(a,a.length,i);
        }
        return a;
    }
    
    private int[] heapSort(int[]a){
        
        a=build_max(a);
        int n=a.length-1;
        for (int i = n; i >= 0; i--) {
            int temp=a[0];
            a[0]=a[i];
            a[i]=temp;
            
            a=heapify(a,n,0);
            n=n-1;
        }
        return a;
    }
    
    public TypeOfAlgorithm(int[]a) {
        initComponents();
        this.array=a;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        insert = new javax.swing.JButton();
        bubble = new javax.swing.JButton();
        select = new javax.swing.JButton();
        heap = new javax.swing.JButton();
        merge = new javax.swing.JButton();
        choose = new javax.swing.JLabel();
        quick = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(0, 0, 900, 500));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);
        setSize(new java.awt.Dimension(900, 550));
        getContentPane().setLayout(null);

        insert.setBackground(new java.awt.Color(204, 204, 204));
        insert.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        insert.setText("Insertion Sort");
        insert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertActionPerformed(evt);
            }
        });
        getContentPane().add(insert);
        insert.setBounds(390, 140, 131, 29);

        bubble.setBackground(new java.awt.Color(204, 204, 204));
        bubble.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        bubble.setText("Bubble Sort");
        bubble.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bubbleActionPerformed(evt);
            }
        });
        getContentPane().add(bubble);
        bubble.setBounds(390, 200, 131, 29);

        select.setBackground(new java.awt.Color(204, 204, 204));
        select.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        select.setText("Selection Sort");
        select.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectActionPerformed(evt);
            }
        });
        getContentPane().add(select);
        select.setBounds(390, 260, 131, 29);

        heap.setBackground(new java.awt.Color(204, 204, 204));
        heap.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        heap.setText("Heap Sort");
        heap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                heapActionPerformed(evt);
            }
        });
        getContentPane().add(heap);
        heap.setBounds(390, 460, 131, 29);

        merge.setBackground(new java.awt.Color(204, 204, 204));
        merge.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        merge.setText("Merge Sort");
        merge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mergeActionPerformed(evt);
            }
        });
        getContentPane().add(merge);
        merge.setBounds(390, 320, 131, 29);

        choose.setFont(new java.awt.Font("Comic Sans MS", 1, 36)); // NOI18N
        choose.setForeground(new java.awt.Color(255, 255, 255));
        choose.setText("Choose type of sorting");
        getContentPane().add(choose);
        choose.setBounds(260, 52, 399, 51);

        quick.setBackground(new java.awt.Color(204, 204, 204));
        quick.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        quick.setText("Quick Sort");
        quick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quickActionPerformed(evt);
            }
        });
        getContentPane().add(quick);
        quick.setBounds(390, 390, 131, 29);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AlgorithmProject/dark-wood.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 900, 540);
    }// </editor-fold>//GEN-END:initComponents

    private void insertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        this.array=insertionSort(this.array);
        new ArrayAfterSorting(this.array).setVisible(true);
    }//GEN-LAST:event_insertActionPerformed

    private void bubbleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bubbleActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        this.array=bubbleSort(this.array);
        new ArrayAfterSorting(this.array).setVisible(true);
    }//GEN-LAST:event_bubbleActionPerformed

    private void selectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        this.array=selectionSort(this.array);
        new ArrayAfterSorting(this.array).setVisible(true);
    }//GEN-LAST:event_selectActionPerformed

    private void heapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_heapActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        this.array=heapSort(array);
        new ArrayAfterSorting(this.array).setVisible(true);
    }//GEN-LAST:event_heapActionPerformed

    private void mergeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mergeActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        mergeSort(this.array, 0, this.array.length-1);
        new ArrayAfterSorting(this.array).setVisible(true);
    }//GEN-LAST:event_mergeActionPerformed

    private void quickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quickActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        quickSort(this.array, 0, this.array.length-1);
        new ArrayAfterSorting(this.array).setVisible(true);
    }//GEN-LAST:event_quickActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bubble;
    private javax.swing.JLabel choose;
    private javax.swing.JButton heap;
    private javax.swing.JButton insert;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton merge;
    private javax.swing.JButton quick;
    private javax.swing.JButton select;
    // End of variables declaration//GEN-END:variables
}
